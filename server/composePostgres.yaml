services:
  PlayDemo:
    image: playdemo-image # Replace this with the actual image name of your Play Framework app
    build:
      context: .
    container_name: playdemo

    labels:
      MAINTAINER: ${APP_MAINTAINER}
      VENDOR: ${APP_VENDOR}
      DESCRIPTION: "This is a docker play framework image example."
      IMAGE_DESCRIPTION: "This Dockerfile creates an image with the PlayDemo App running on it."
 
    environment:
      APP_VERSION: ${APP_VERSION}

      # environment read by application.conf
      DB_DEFAULT_URL: ${DB_DEFAULT_URL}
      DB_DEFAULT_DRIVER: ${DB_DEFAULT_DRIVER}
      DB_DEFAULT_USERNAME: ${DB_DEFAULT_USERNAME}
      DB_DEFAULT_PASSWORD: ${DB_DEFAULT_PASSWORD}

      GOOGLE_CLIENTID: ${GOOGLE_CLIENTID}
      PLAY_HTTP_PORT: ${PLAY_HTTP_PORT}
      PLAY_HTTP_SECRET_KEY: ${PLAY_HTTP_SECRET_KEY}
      PLAY_MAILER_HOST: ${PLAY_MAILER_HOST}
      PLAY_MAILER_PORT: ${PLAY_MAILER_PORT}
      PLAY_MAILER_USER: ${PLAY_MAILER_USER}
      PLAY_MAILER_PASSWORD: ${PLAY_MAILER_PASSWORD}
      PIDFILE_PATH: ${PIDFILE_PATH}
      #LOGFILE_PATH: "/opt/docker/logs"
    ports:
      - "${PLAY_HTTP_PORT}:${PLAY_HTTP_PORT}"      
    volumes:
      - "./logs:/opt/docker/logs:rw"
    depends_on:
      - db
    networks:
      - app-network


  db:
    image: postgres
    restart: always
    container_name: db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - ./data/postgres/db:/var/lib/postgresql/data
      - ./data/postgres/init/init.sql:/docker-entrypoint-initdb.d/create_database.sql # name in container is arbitrary
    networks:
      - app-network      
   
#volumes:
#  db_data:

networks:
  app-network:
    driver: bridge








